{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>The Jawal SDK is a powerful and versatile tool designed for developers who are looking to integrate real-time location tracking capabilities into their Android and iOS applications. The SDK is built with simplicity and flexibility in mind, allowing developers to easily add location tracking functionality to their applications without having to worry about the underlying implementation details.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li> <p>Real-time Location Tracking: With Jawal, developers can easily enable real-time location tracking within their applications. This feature is especially valuable for applications that require live location updates, such as delivery services, ride-sharing apps, and asset tracking systems.</p> </li> <li> <p>Cross-Platform Compatibility: The SDK is designed to work seamlessly on both Android and iOS platforms, ensuring a consistent and reliable tracking experience for users on different devices.</p> </li> <li> <p>Session Management: Jawal introduces the concept of sessions, which are created when users initiate tracking. This allows for organized tracking data management and the ability to view historical tracking data effortlessly.</p> </li> <li> <p>JavaScript Library: To complement the SDK's functionality, a JavaScript library is being developed for client websites. This library will enable developers to access and display tracking data in real-time and historical formats, enhancing the user experience on web platforms.</p> </li> <li> <p>Customization: The SDK provides options for customization to suit various application requirements. Developers can tailor the tracking experience to their specific needs, including defining session parameters and data visualization.</p> </li> <li> <p>User-Friendly Integration: Jawal is designed with developers in mind, offering straightforward integration steps and comprehensive documentation to ensure a smooth implementation process.</p> </li> <li> <p>Scalability: Whether you're building a small-scale application or a large-scale solution, Jawal's architecture is built to handle a wide range of tracking demands, making it suitable for projects of all sizes.</p> </li> </ul>"},{"location":"android/01-getting-started/","title":"Getting Started","text":""},{"location":"android/01-getting-started/#installation","title":"Installation","text":"<p>The easiest way to install the SDK is to use the Gradle dependency management system. To do this, add the following to your <code>build.gradle</code> file:</p> <pre><code>repositories {\n    ...\n    maven {\n        url \"https://europe-west1-maven.pkg.dev/ace-ensign-383123/jawal-java\"\n    }\n}\n</code></pre> <pre><code>dependencies {\n    ...\n    implementation 'com.yastack:jawal:0.0.4'\n}\n</code></pre> <p>Once you have added the dependency, you can import the SDK into your project:</p> <pre><code>import com.yastack:jawal.Jawal;\n</code></pre>"},{"location":"android/01-getting-started/#initialization","title":"Initialization","text":"<p>The SDK must be initialized before it can be used. This is done by calling the <code>Jawal.init()</code> method:</p> <pre><code>Jawal.init(this, config);\n</code></pre> <p>See the Configuration page for more information about the <code>config</code> parameter.</p>"},{"location":"android/02-configuration/","title":"Configuration","text":"<p>The <code>JawalConfig</code> object is used to configure the SDK. It can be created using the <code>JawalConfig.Builder</code> class.</p> <pre><code>final config = JawalConfig.Builder()\n    .setSdkKey(\"SDK_KEY\")\n    .setUserId(\"USER_ID\")\n    .build();\n</code></pre> <p>The <code>setSDKKey()</code> and <code>setUserId()</code> methods are required. The <code>USER_ID</code> must be a unique identifier for the user in the project (for example, a user ID from your database, email, username, etc...). The <code>SDK_KEY</code> is the project's SDK key, which can be found in the project's settings page in the dashboard.</p>"},{"location":"android/02-configuration/#optional-configuration","title":"Optional configuration","text":"<p>The <code>JawalConfig</code> object also allows you to configure the following:</p>"},{"location":"android/02-configuration/#setdescription","title":"<code>setDescription()</code>","text":"<pre><code>JawalConfig.Builder()\n    ...\n    .setDescription(\"John Doe\")\n    .build();\n</code></pre> <p>This method allows you to set a description for the user to identify them in the dashboard, for example, their name. The default value is <code>null</code>.</p>"},{"location":"android/02-configuration/#settrackinginterval","title":"<code>setTrackingInterval()</code>","text":"<pre><code>JawalConfig.Builder()\n    ...\n    .setTrackingInterval(1000)\n    .build();\n</code></pre> <p>This method allows you to set the interval between location updates in milliseconds. The default value is <code>1000</code> (1 second).</p>"},{"location":"android/02-configuration/#setdistancefilter","title":"<code>setDistanceFilter()</code>","text":"<pre><code>JawalConfig.Builder()\n    ...\n    .setTrackingDistance(10)\n    .build();\n</code></pre> <p>This method allows you to set the minimum distance the user must travel before their location is tracked. The default value is <code>50</code> (50 meters).</p>"},{"location":"android/02-configuration/#setenablebackgroundtracking","title":"<code>setEnableBackgroundTracking()</code>","text":"<pre><code>JawalConfig.Builder()\n    ...\n    .setEnableBackgroundTracking(true)\n    .build();\n</code></pre> <p>Enable the background tracking service. The default value is <code>true</code>.</p> <p>Warning</p> <p>Enabling background tracking will cause the SDK to track the user's location even when the app is in the background. Make sure that you have the necessary permissions to do this.</p>"},{"location":"android/03-tracking/","title":"Tracking","text":"<p>After initializing the SDK and requesting the required permissions, you can start tracking the user's location.</p> <p>Warning</p> <p>Make sure that the app has the necessary permissions to track the user's location.</p>"},{"location":"android/03-tracking/#start-tracking","title":"Start tracking","text":"<p>Simply call the <code>Jawal.startTracking()</code> method to start tracking the user's location.</p> <pre><code>Jawal.startTracking()\n//or \nJawal.startTracking(\"SESSION_ID\")\n</code></pre> <p>Note</p> <p>The <code>SESSION_ID</code> parameter is optional and it's used to query the session's API to easily get the session's data. if your app has some kind of trip management system, you can use the trip's ID as the <code>SESSION_ID</code> to easily get the trip's data.</p>"},{"location":"android/03-tracking/#stop-tracking","title":"Stop tracking","text":"<p>Simply call the <code>Jawal.stopTracking()</code> method to stop tracking the user's location.</p> <pre><code>Jawal.stopTracking()\n</code></pre> <p>Info</p> <p>The SDK will automatically start tracking after initialization, so you don't need to call <code>Jawal.startTracking()</code> after app restarts.</p>"},{"location":"flutter/01-getting-started/","title":"Getting Started","text":""},{"location":"flutter/01-getting-started/#installation","title":"Installation","text":"<p>The Jawal flutter SDK is available through pub.dev. To install it, simply add the following line to your <code>pubspec.yaml</code> file:</p> <pre><code>dependencies:\n  jawal_flutter: ^1.0.4\n</code></pre> <p>Once you have added the dependency, you can import the SDK into your project:</p> <pre><code>import 'package:jawal_flutter/jawal.dart';\n</code></pre>"},{"location":"flutter/01-getting-started/#initialization","title":"Initialization","text":"<p>We recommend that you initialize the SDK in the <code>main()</code> method of your <code>main.dart</code> file:</p> <pre><code>JawalConfig config = JawalConfig(\n    apiKey: \"YOUR_API_KEY\",\n    userId: \"USER_UNIQUE_ID\", \n    userDescription: \"USER_DESCRIPTION\", // Optional\n    distanceFilter: 50, // Optional\n    enableBackgroundTracking: true, // Optional\n    interval: 1000, // Optional (android only)\n    onInitResult: (InitResultEvent event) {\n        if(event.isSuceessful) {\n            /// SDK is initialized successfully\n        } else {\n            /// You can get the error message from event.error\n            print(event.error);\n        }\n    },\n);\nJawal.init(config);\n</code></pre> <p><code>USER_UNIQUE_ID</code>: A unique ID for the user, it can be the user ID in your database <code>USER_DESCRIPTION</code>: A description for the user, it can be the user name</p> <p>See the Configuration page for a list of all available configuration options.</p>"},{"location":"flutter/02-configuration/","title":"Configuration","text":"<p>the init method takes a config object that contains the following properties:</p>"},{"location":"flutter/02-configuration/#sdkkey-required","title":"sdkKey (required)","text":"<p>The SDK key of the project. You can find this in the project's settings page in the dashboard.</p>"},{"location":"flutter/02-configuration/#userid-required","title":"userId (required)","text":"<p>A unique identifier for the user in the project (for example, a user ID from your database, email, username, etc...).</p>"},{"location":"flutter/02-configuration/#userdescription-optional","title":"userDescription (optional)","text":"<p>A description for the user to identify them in the dashboard, for example, their name.</p>"},{"location":"flutter/02-configuration/#distancefilter-optional","title":"distanceFilter (optional)","text":"<p>The minimum distance the user must travel before their location is tracked. The default value is <code>10</code> (10 meters).</p>"},{"location":"flutter/02-configuration/#enablebackgroundtracking-optional","title":"enableBackgroundTracking (optional)","text":"<p>Enable the background tracking service. The default value is <code>false</code>.</p>"},{"location":"flutter/02-configuration/#interval-optional","title":"interval (optional)","text":"<p>(android only) The interval between location updates in milliseconds. The default value is <code>1000</code> (1 second).</p> <p>Warning</p> <p>Enabling background tracking will cause the SDK to track the user's location even when the app is in the background. Make sure that you have the neccessary permissions to do this (both iOS and Android).</p>"},{"location":"flutter/03-tracking/","title":"Tracking","text":"<p>Warning</p> <p>Calling the SDK's startTracking method without requesting the necessary permissions will cause the SDK to throw an exception. We recommend this package to handle the permissions for you: https://pub.dev/packages/permission_handler</p>"},{"location":"flutter/03-tracking/#start-tracking","title":"Start tracking","text":"<p>Simply call the <code>Jawal.startTracking()</code> method to start tracking the user's location.</p> <pre><code>Jawal.startTracking()\n//or\nJawal.startTracking(\"SESSION_ID\")\n</code></pre> <p>Note</p> <p>The <code>SESSION_ID</code> parameter is optional and it's used to query the session's API to easily get the session's data. if your app has some kind of trip management system, you can use the trip's ID as the <code>SESSION_ID</code> to easily get the trip's data.</p>"},{"location":"flutter/03-tracking/#stop-tracking","title":"Stop tracking","text":"<p>Simply call the <code>Jawal.stopTracking()</code> method to stop tracking the user's location.</p> <pre><code>Jawal.stopTracking()\n</code></pre>"},{"location":"flutter/03-tracking/#check-if-the-sdk-is-tracking","title":"Check if the SDK is tracking","text":"<p>You can check if the SDK is tracking the user's location by calling the <code>Jawal.isTracking()</code> method.</p> <pre><code>let isTracking = Jawal.isTracking()\n</code></pre>"},{"location":"ios/01-getting-started/","title":"Getting Started","text":""},{"location":"ios/01-getting-started/#installation","title":"Installation","text":"<p>The Jawal SDK is available through CocoaPods. To install it, simply add the following line to your Podfile:</p> <pre><code>pod 'jawal-ios'\n</code></pre>"},{"location":"ios/01-getting-started/#initialization","title":"Initialization","text":"<p>We recommend that you initialize the SDK in the <code>application(_:didFinishLaunchingWithOptions:)</code> method of your <code>AppDelegate</code>:</p> <pre><code>import JawalSwift\n\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&gt; Bool {\n    Jawal.start { config in\n        config.sdk_key = \"YOUR_SDK_KEY\"\n        config.user_id = \"USER_ID\"\n    }\n    return true\n}\n</code></pre> <p>Optionally You can listen to the result of the initialization by passing a callback to the <code>start()</code> method:</p> <pre><code>Jawal.start { config in\n    config.sdk_key = \"YOUR_SDK_KEY\"\n    config.user_id = \"USER_ID\"\n},\ncompletion: { result in\n    switch result {\n    case .success:\n        print(\"Jawal initialized successfully\")\n    case .failure(let error):\n        print(\"Jawal failed to initialize: \\(error)\")\n    }\n}\n</code></pre> <p>See the Configuration page for a list of all available configuration options.</p>"},{"location":"ios/02-configuration/","title":"Configuration","text":"<p>the init method takes a config object that contains the following properties:</p>"},{"location":"ios/02-configuration/#sdk_key-required","title":"sdk_key (required)","text":"<p>The SDK key of the project. You can find this in the project's settings page in the dashboard.</p>"},{"location":"ios/02-configuration/#user_id-required","title":"user_id (required)","text":"<p>A unique identifier for the user in the project (for example, a user ID from your database, email, username, etc...).</p>"},{"location":"ios/02-configuration/#user_description-optional","title":"user_description (optional)","text":"<p>A description for the user to identify them in the dashboard, for example, their name.</p>"},{"location":"ios/02-configuration/#distancefilter-optional","title":"distanceFilter (optional)","text":"<p>The minimum distance the user must travel before their location is tracked. The default value is <code>50</code> (50 meters).</p>"},{"location":"ios/02-configuration/#enable_background_tracking-optional","title":"enable_background_tracking (optional)","text":"<p>Enable the background tracking service. The default value is <code>false</code>.</p> <p>Warning</p> <p>Enabling background tracking will cause the SDK to track the user's location even when the app is in the background. Make sure that you have the <code>Background modes</code> capability enabled in your app's <code>Signing &amp; Capabilities</code> settings and the <code>Location updates</code> mode is checked.</p> <p>You can find more information about this here.</p>"},{"location":"ios/03-tracking/","title":"Tracking","text":"<p>Warning</p> <p>Calling the SDK's startTracking method without requesting the necessary permissions will cause the SDK to throw an exception. You can find more information about this here.</p>"},{"location":"ios/03-tracking/#start-tracking","title":"Start tracking","text":"<p>Simply call the <code>Jawal.startTracking()</code> method to start tracking the user's location.</p> <pre><code>Jawal.startTracking()\n//or\nJawal.startTracking(\"SESSION_ID\")\n</code></pre> <p>Note</p> <p>The <code>SESSION_ID</code> parameter is optional and it's used to query the session's API to easily get the session's data. if your app has some kind of trip management system, you can use the trip's ID as the <code>SESSION_ID</code> to easily get the trip's data.</p>"},{"location":"ios/03-tracking/#stop-tracking","title":"Stop tracking","text":"<p>Simply call the <code>Jawal.stopTracking()</code> method to stop tracking the user's location.</p> <pre><code>Jawal.stopTracking()\n</code></pre>"},{"location":"ios/03-tracking/#check-if-the-sdk-is-tracking","title":"Check if the SDK is tracking","text":"<p>You can check if the SDK is tracking the user's location by calling the <code>Jawal.isTracking()</code> method.</p> <pre><code>let isTracking = Jawal.isTracking()\n</code></pre>"},{"location":"javascript/01-getting-started/","title":"jawal-js","text":""},{"location":"javascript/01-getting-started/#instalation","title":"Instalation","text":"<p>If you're using a bundler like webpack or rollup, you can install the library from npm:</p> <pre><code>npm install jawal-js\n</code></pre> <pre><code>import { getJawal } from \"jawal-js\";\n//you can import the css file if you're using webpack\nimport \"jawal-js/dist/style.css\";\n</code></pre> <p>If you're not using a bundler, you can include the library from a CDN:</p> <pre><code>&lt;script src=\"https://cdn.yastack.app/v0.0.4/jawal-js.umd.cjs\" type=\"application/javascript\"&gt;&lt;/script&gt;\n&lt;link rel=\"stylesheet\" href=\"https://cdn.yastack.app/v0.0.4/style.css\" /&gt;\n</code></pre> <p>And then you can access the library from the <code>window</code> object:</p> <pre><code>const { getJawal } = window.Jawal;\n</code></pre>"},{"location":"javascript/01-getting-started/#usage","title":"Usage","text":"<p>To initialize the library, you need to call the <code>getJawal</code> method with your API key:</p> <pre><code>const app = document.getElementById(\"app\");\nconst jawal = await getJawal(\"JS_API_KEY\", app);\n</code></pre> <p>The <code>getJawal</code> method returns a promise that resolves to a <code>Jawal</code> object.</p> <p>The <code>Jawal</code> object has the following methods:</p>"},{"location":"javascript/01-getting-started/#loadsessionbyexternalid","title":"<code>loadSessionByExternalId</code>","text":"<pre><code>jawal.loadSessionByExternalId(\"session_external_id\");\n</code></pre> <p>this method fetches the session data from the API and loads the \"Session details\" view in the widget.</p> <p>Note</p> <p>The <code>session_external_id</code> is the ID that you pass to the <code>jawal.startSession</code> method. if there's more than one session with the same external ID, the latest one will be loaded.</p>"}]}